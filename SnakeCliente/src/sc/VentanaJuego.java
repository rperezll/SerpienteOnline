package sc;

import java.applet.AudioClip;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.LinkedList;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import static sc.SocketCliente.ac;

/**
 * Esta clase observa los valores de la puntuación de la clase ControlCliente() la cual los
 * ha recibido del servidor. Dibuja en el tablero los datos recibidos por el cliente.
 * Esta clase observa a la clase ControlCliente.
 * @author: ROBERTO PÉREZ LLANOS
 * @version: 19/06/2016
 */

public class VentanaJuego extends javax.swing.JFrame implements Observer {

    ControladorP controlador = new ControladorP();
    JPanel PanelRefs[][];
    boolean cerrarWindows=false;
    LinkedList <JPanel> serpiente = new LinkedList<JPanel>();
    int alto, ancho;
   AudioClip s1;
           
    
    /**
    * Constructor de la ventana de juego. Mediante el ancho y el alto suministrado por el servidor, crea
    * el tablero mediante estructuras jPanel alamacenadas en un array bidimensinal PanelRefs.
    * Además, hacemos efectuva la lectura del controlador.
    */
    public VentanaJuego(int ANCHO, int ALTO) {                                               
        alto=ALTO;
        ancho=ANCHO;
        PanelRefs = new JPanel[ANCHO][ALTO];
        initComponents();
        this.setTitle("Serpiente");
        Tablero.setLayout(new GridLayout(ANCHO, ALTO));

        for (int i = 0; i < ANCHO; i++) {
            for (int j = 0; j < ALTO; j++) {
                if (i==0 || j==0 || j==ALTO-1 || i==ANCHO-1){
                    JPanel pixel = new JPanel();
                    pixel.setBackground(Color.blue);
                    Tablero.add(pixel);
                    PanelRefs[i][j] = pixel;
                }else{  
                    JPanel pixel = new JPanel();
                    pixel.setBackground(Color.black);
                    Tablero.add(pixel);
                    PanelRefs[i][j] = pixel;
                }
            }
        }
        addKeyListener(controlador);                       
        setFocusable(true);
        pack();
        
            s1= java.applet.Applet.newAudioClip(getClass().getResource("/sc/partida.wav"));
            s1.play();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Tablero = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Tablero.setBackground(new java.awt.Color(255, 255, 255));
        Tablero.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tablero.setMaximumSize(new java.awt.Dimension(3600, 3600));
        Tablero.setMinimumSize(new java.awt.Dimension(500, 500));

        javax.swing.GroupLayout TableroLayout = new javax.swing.GroupLayout(Tablero);
        Tablero.setLayout(TableroLayout);
        TableroLayout.setHorizontalGroup(
            TableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        TableroLayout.setVerticalGroup(
            TableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Tablero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Tablero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Tablero;
    // End of variables declaration//GEN-END:variables
    
    /**
    * Este método se ejecuta cuando cambia algún parámetro del objeto cc de la clase ControlCliente()
    * Refleja en el tablero a la serpiente en movimiento, los tesoros y las bombas.
    */
    @Override
    public void update(Observable o, Object arg) {  //Metodo que comunica VentanaJuego-Metodo
        ControlCliente cc = (ControlCliente) o;
        //Control de cerrado forzado de la ventana
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e){
                cerrarWindows=true;
            }
        });
        if (cc.puntuacion==5){
            
        }
            
        if (cerrarWindows)
           cc.parar();  
        //Cuando inciamos nuestro juego
        if (cc.inicio){
            
            serpiente.add(PanelRefs[cc.getxPos()][cc.getyPos()]);
            serpiente.getFirst().setBackground(Color.WHITE);
            cc.setInicio(false);
            
        }
        if (cc.cuerpoChoque){
           
            System.out.println("Entra");
            AudioClip s2;
            s2= java.applet.Applet.newAudioClip(getClass().getResource("/sc/fin.wav"));
            s2.play();
            s1.stop();
            cc.parar();
            JOptionPane.showMessageDialog(this,"¡Choque con la cola!\nFin del juego","Aviso",JOptionPane.ERROR_MESSAGE);
            System.exit(0);
            cc.setChoqueCola(false);
        }else if (cc.bomba){
            
            AudioClip s3;
            s3= java.applet.Applet.newAudioClip(getClass().getResource("/sc/s.wav"));
            s3.play();
            s1.stop();
            cc.parar();
            JOptionPane.showMessageDialog(this,"¡BOOM!\nFin del juego","Aviso",JOptionPane.ERROR_MESSAGE);
            System.exit(0);
            cc.setChoqueBomba(false);    
        }else if (cc.choque){
           
            AudioClip s4;
            s4= java.applet.Applet.newAudioClip(getClass().getResource("/sc/fin.wav"));
            s4.play();
             s1.stop();
            cc.parar();
            JOptionPane.showMessageDialog(this,"¡Choque con el límite!\nFin del juego","Aviso",JOptionPane.ERROR_MESSAGE);
            System.exit(0);
            cc.reiniciar();
            cc.setChoque(false);
           // cc.inicio=true;
        }else{ 
            //Movimiento de nuestra serpiente
            if (cc.mover){  //Si la orden es desplazar a la serpiente
                
                if (serpiente.contains(PanelRefs[cc.getxPos()][cc.getyPos()])){
                    cc.cuerpoChoque=true;
                }
                serpiente.addFirst(PanelRefs[cc.getxPos()][cc.getyPos()]);
                serpiente.getFirst().setBackground(Color.WHITE);
                if(!serpiente.contains(PanelRefs[cc.xBOld][cc.yBOld]))
                    PanelRefs[cc.xBOld][cc.yBOld].setBackground(Color.RED);
                if (cc.getxTes()!=cc.xBOld &&  cc.getyTes()!=cc.yBOld)
                    PanelRefs[cc.getxTes()][cc.getyTes()].setBackground(Color.GREEN);
                if (serpiente.contains(PanelRefs[cc.xTesOld][cc.yTesOld]))
                    PanelRefs[cc.xTesOld][cc.yTesOld].setBackground(Color.WHITE); 
            }else{
                serpiente.pollLast().setBackground(Color.black);
                if (serpiente.contains(PanelRefs[cc.xTesOld][cc.yTesOld]))
                    PanelRefs[cc.xTesOld][cc.yTesOld].setBackground(Color.WHITE);    
            }    
            if (cc.aumento){    //Si la orden es aumentar el tamaño de la serpiente
                System.out.println("ENtra");
                if (serpiente.contains(PanelRefs[cc.getxPos()][cc.getyPos()]))
                    cc.cuerpoChoque=false;
                serpiente.add(PanelRefs[cc.getxPos()][cc.getyPos()]);
                cc.aumento=false;
                cc.tipoEvento="";
            }
        }
    }
}